#!/bin/bash
# File: daemon
# This script manipulates daemons in /etc/rc.d on Arch Linux systems.

# Version 2.1  (25. April 2011)

# Copyright (c) 2010-2011, Ben Morgan <neembi@googlemail.com>
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# The function get_daemon_commands()
# by Andrwe Lord Weber [http://andrwe.org]

# Basic configuration
dir_available='/etc/rc.d'
dir_running='/var/run/daemons'
quit_on_fail=false

function _version () {
    echo "arch-daemon version 2.1 (25. April 2011)"
}

function _help () {
    _version
    echo 'Easily manipulate daemons in /etc/rc.d on Arch Linux.'
    echo 
    echo 'Usage: daemon [options] [command] <daemons>'
    echo 'Available options:'
    echo '  --command cmd  -c   send the given command'
    echo '  --fail         -f   quit when a service does not exist'
    echo '                      or when a service quits with an error'
    echo '  --list         -l   list started daemons and quit'
    echo '  --available    -a   list all available daemons and quit'
    echo '  --arguments    -z   list sendable commands to given daemons and quit'
    echo '                      e.g. daemon -z cups httpd network'
    echo '  --help         -h   display this help and quit'
    echo '  --version      -v   display the version and quit'
    echo 
    echo 'Any command may be given; if no command is given,'
    echo 'then `start` is assumed. Some commands have aliases:'
    echo '  s=start,  t=stop,  r=restart,  l=reload'
    echo 
    echo 'If the first argument does not exist in /etc/rc.d as'
    echo 'a daemon, then it is assumed to be a command.'
    echo 'If a aliased command exists as a daemon in /etc/rc.d,'
    echo 'then the command can be send with `-c command`.'
    echo 
}

# Print currently running daemons
function _print_running () {
    echo "Currently running daemons:"
    /bin/ls -1 $dir_running | /usr/bin/xargs -I daemon echo "  daemon"
}

# Print all available daemons
function _print_available () {
    echo "All available daemons:"
    /bin/ls --color=never --hide="*.pac(orig|new|save)|functions*|*functions)" $dir_available
}

# Print available commands for an array of daemons
function _print_arguments () {
    array=$1  # array of daemons to print info for
    
    # check that the array of services is not empty
    if [ -z ${array[0]} ]; then
        _help
        exit 2
    fi

    echo "Available commands for the daemon(s):"
    for service in ${array[@]}; do
        # check if daemon is available
        if ! _daemon_available $service; then
            echo "  daemon '$service' does not exist!" 
        else
            _get_daemon_commands $service
            echo "  $service: ${last_daemon_commands[@]}"
        fi
    done
}

# Quit on fail
function _fail () {
    if [ $quit_on_fail == true ]; then
        echo "failing."
        exit 2
    fi
}

# Check if a daemon is available
function _daemon_available () {
    test -f $dir_available/$1
    return $?
}

# Stores the supported commands of the daemon in the array below
declare -a last_daemon_commands
function _get_daemon_commands () {
    # Get all of the possible commands that there are, by going through each case.
    last_daemon_commands=$(/bin/sed '/#.*sh/,/^.*case\s*"*\${*1}*"*.*/ { /^.*case\s*"*\${*1}*"*.*/!d };s/^.*case\s*"*\${*1}*"*.*/;;/g;/;;/,/^\s*.*)\s*$/ !d;/^\s*.*)\s*$/ !d;/\*/d;/;;/d;s/\s*//g;s/)//g;s/|/ /g' $dir_available/$1 | LANG=C /usr/bin/sort | /usr/bin/uniq | /bin/tr '\n' ' ')
}

# Check if a daemon supports a command;
function _daemon_has_command () {
    _get_daemon_commands $1
    for i in ${last_daemon_commands[@]}; do
        if [ $i == $2 ]; then
            return 0
        fi
    done
    
    return 1
}

# Check a service if it fulfills the requirements
# i.e. it exists and supports the command
function _check_service () {
    service=$1  # the service (e.g. cups)
    cmd=$2      # the command (e.g. start)

    # check if daemon is available
    if ! _daemon_available $service; then
        echo "daemon '$service' does not exist!" 
        return 1
    fi
    
    # check if daemon supports given command
    if ! _daemon_has_command $service $cmd; then
        echo "daemon '$service' does not support the command '$cmd'" 
        echo "        $service supports: ${last_daemon_commands[@]}" 
        return 1
    fi

    return 0
}

# Run a service
function _run () {
    service=$1  # the service (e.g. cups)
    cmd=$2      # the command (e.g. start, stop, restart, reload)
    
    # Run the service, if it exists (we'll trust the user on the command)
    if _daemon_available $service; then
        /etc/rc.d/$service $cmd
    fi
    return $?
}

# Run all of the services
function _runall () {
    array=$1  # the array of services
    cmd=$2    # the command to be executed

    # Check all the services first
    status=0
    for service in ${array[@]}; do
        _check_service $service $cmd
        status=$(($status + $?))
    done
    [ $status -ne 0 ] && fail

    # Make sure that we are root
    if [ "$(/usr/bin/id -u)" != "0" ]; then
        echo "root access required." 
	    exit 1
    fi
    
    # Run all the services
    for service in ${array[@]}; do
        _run $service $cmd
        [ $? -ne 0 ] && _fail
    done
}


# Make sure that we have some arguments
if [ $# -eq 0 ]; then
    _help
    exit 1
fi

# Parse the arguments and compile a command
# Default command is "start" if not specified
declare -a array
cmd="start"
count=-1
print_commands=false
while [ $# -ne 0 ]; do
    case $1 in
        -a|--available )
            print_available
            exit 0;;
        -l|--list )
            print_running
            exit 0;;
        -h|--help )
            help
            exit 0;;
        -v|--version )
            version
            exit 0;;
        -z|--arguments )
            print_commands=true
            shift 1;;
        -f|--fail )
            quit_on_fail=true
            shift 1;;
        -c|--command )
            cmd=$2
            if [ $count -eq -1 ]; then
                count=0
            fi
            shift 2;;
        * )
            if [ $count -eq -1 ]; then
                # We have the first non-option, see if it is a command
                count=0
                case $1 in
                    s|start  ) cmd="start";;
                    t|stop   ) cmd="stop";;
                    r|restart) cmd="restart";;
                    l|reload ) cmd="reload";;
                    * )
                        if _daemon_available $1; then
                            array[$count]=$(basename $1)
                            count=$(($count + 1))
                        else
                            cmd=$1
                        fi
                esac
            else
                # basename the service to prevent running other applications
                # (so you can't run a service ../../home/someuser/bad-app.sh)
                array[$count]=$(basename $1);
                count=$(($count + 1))
            fi
            shift 1
    esac
done

if $print_commands; then
    _print_arguments $array
else
    _runall $array $cmd
fi
exit $?

